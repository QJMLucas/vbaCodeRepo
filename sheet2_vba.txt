
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim Sh As Worksheet
    Set Sh = ThisWorkbook.Sheets("Sheet2")
    Dim priceBook As Worksheet
    Set priceBookSh = Workbooks("reformatted_priceBook.xlsx")
    
    Dim storeColumnACategory As String
    
    ' Started from column 2 which is the SheetName
    If Target.Address = Sh.Cells(Target.Row, 2).Address Then
        
        Dim i As Long
        Dim recordCategory As String
        Dim deleteCellValueFlag As Boolean

        deleteCellValueFlag = False
        
        
        If Target.Value = "WAN-Vocus" Then
            

            For i = 1 To 1000

                If IsEmpty(priceBookSh.Worksheets("WAN-Vocus").Cells(i, 1).Value) Then

            Else
            
                tempVar = priceBookSh.Worksheets("WAN-Vocus").Cells(i, 1).Value

                recordCategory = recordCategory & tempVar & ","


            End If
            Next i
            recordCategory = Left(recordCategory, Len(recordCategory) - 1)

            categoryDropdownAddress = Range(Target.Address).Offset(, 1).Address
            
            
            ' generate dropdown with value stored in recordCategory
            With Sh.Range(categoryDropdownAddress).Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=recordCategory
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = ""
                .InputMessage = ""
                .ErrorMessage = ""
                .ShowInput = True
                .ShowError = True
            End With
        
        Else
    
        End If
    
    
'---------------------------------------sh.Cells(Target.Row, 3) equals C3---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 3).Address Then
    
         Dim serviceDropDownStr As String
       

        '======================search for sheetName selected ======================================
         With priceBookSh.Worksheets("WAN-Vocus").Range("A:A")
             Set c = .Find(Target.Value, LookIn:=xlValues)
             If c Is Nothing Then
                 MsgBox "NothingFound"
             Else
                 storeColumnACategory = c.Address
             End If
         End With



         Dim serviceAddressFromPriceBook As String

         ' offset to right 1 -> and down 1 to get the services in pricebook for WAN-Vocus
         serviceAddressFromPriceBook = Range(c.Address).Offset(1, 1).Address

         ' Services in B column start - in the pricebook sheet
         Z = Range(serviceAddressFromPriceBook).Row

         Do Until IsEmpty(priceBookSh.Worksheets("WAN-Vocus").Cells(Z, 2).Value)

             serviceDropDownStr = serviceDropDownStr & priceBookSh.Worksheets("WAN-Vocus").Cells(Z, 2).Value & ","

             Z = Z + 1
             Loop

        '----------remove ending , character---------------'
         serviceDropDownStr = Left(serviceDropDownStr, Len(serviceDropDownStr) - 1)

         Address_serviceColumn = Range(Target.Address).Offset(, 1).Address
         
         
        '---------"D3" - get D3 address-----------------'
         With Sh.Range(Address_serviceColumn).Validation
                 .Delete
                 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                 xlBetween, Formula1:=serviceDropDownStr
                 .IgnoreBlank = True
                 .InCellDropdown = True
                 .InputTitle = ""
                 .ErrorTitle = ""
                 .InputMessage = ""
                 .ErrorMessage = ""
                 .ShowInput = True
                 .ShowError = True
             End With



        'Start------------------------------------------------Create Oneoffselection----------------------------------------------

        Dim onceOffStrDropDown As String

        Dim Address_onceOffChargeColumn As String

        '-----------c.address contains the position of the first figure in onceoff , i.e , 12 in the case of WAN-Vocus------------
        Address_onceOffChargeColumn = Range(c.Address).Offset(, 4).Address

        x = Range(Address_onceOffChargeColumn).Column
        
        
        
        '----------Find until empty-------- (3,x) is the first value in onceoff
        Do Until IsEmpty(priceBookSh.Worksheets("WAN-Vocus").Cells(3, x).Value)

             onceOffStrDropDown = onceOffStrDropDown & priceBookSh.Worksheets("WAN-Vocus").Cells(3, x).Value & ","

             x = x + 1
        Loop

        onceOffStrDropDown = Left(onceOffStrDropDown, Len(onceOffStrDropDown) - 1)
      
        
        'End------------------------------------------------Create Oneoffselection----------------------------------------------

        

        'Start**********************************************get contract term column - F3**********************************************
        Address_contractTermColumn = Range(Target.Address).Offset(, 3).Address
        
        '----------------------create dropdown list three to the right of the Target.Address---------------------
        With Sh.Range(Address_contractTermColumn).Validation
                 .Delete
                 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                 xlBetween, Formula1:=onceOffStrDropDown
                 .IgnoreBlank = True
                 .InCellDropdown = True
                 .InputTitle = ""
                 .ErrorTitle = ""
                 .InputMessage = ""
                 .ErrorMessage = ""
                 .ShowInput = True
                 .ShowError = True
        End With


          '  c.Address.offset(,2) should get G3 New-Modification-relocation
        Address_NMRColumn = Range(Target.Address).Offset(, 4).Address
        With Sh.Range(Address_NMRColumn).Validation
                 .Delete
                 .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                 xlBetween, Formula1:="New,Modification,Relocation"
                 .IgnoreBlank = True
                 .InCellDropdown = True
                 .InputTitle = ""
                 .ErrorTitle = ""
                 .InputMessage = ""
                 .ErrorMessage = ""
                 .ShowInput = True
                 .ShowError = True
        End With
        
        Application.EnableEvents = True

    
'---------------------------------------sh.Cells(Target.Row, 4) equals C4 column D---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 4).Address Then
    
    
    ' search for category again, then offset (1,1)
      '  Target.Value
        
        Dim d As Range
        
        categoryValue = Target.Offset(, -1).Value
        
        With priceBookSh.Worksheets("WAN-Vocus").Range("A:A")
        Set d = .Find(categoryValue, LookIn:=xlValues)
'            If d Is Nothing Then
'
'                MsgBox "NothingFound"
'            Else
'                MsgBox "d address found and showing next"
'                MsgBox d.Address
'            End If
            
        End With
        
        
        ' firstItemInSpeed stores the first value in Speed column in the price sheet
        firstItemInSpeed = d.Offset(1, 1).Row
        
            
        '
        Do Until IsEmpty(priceBookSh.Worksheets("WAN-Vocus").Cells(firstItemInSpeed, 2).Value)
            If priceBookSh.Worksheets("WAN-Vocus").Cells(firstItemInSpeed, 2).Value = Target.Value Then
                '-----Store the figure at the right of the selected speed to and store in getThisVar
                getThisVar = priceBookSh.Worksheets("WAN-Vocus").Cells(firstItemInSpeed, 2 + 1)
                firstItemInSpeed = firstItemInSpeed + 1
            Else:
                firstItemInSpeed = firstItemInSpeed + 1
            End If
        Loop
        
        
        '--------assigns the quality values to quality column
        Target.Offset(, 1) = getThisVar
        


'---------------------------------------sh.Cells(Target.Row, 5) Column E---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 5).Address Then
       

'---------------------------------------sh.Cells(Target.Row, 6) Column F---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 6).Address Then
        
            
    

'---------------------------------------sh.Cells(Target.Row, 7) Column G---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 7).Address Then
    
        If IsEmpty(Target.Value) Then
    
        Else
    
            Dim oneLeftFromNNMRColumn As Integer
            Dim oneLeftFromNMRRow As Integer
    
            Dim assignPriceVarColumn As Integer
            Dim assignPriceVarRow As Integer
    
            contractTermValue = Range(Target.Address).Offset(, -1).Value
    
            'MsgBox contractTermValue
    
    
            ' If its' new, lookup contractTerm value and look up the price in onceoff
            If Target.Value = "New" Then
    
                With priceBookSh.Worksheets("WAN-Vocus").Rows(3)
                Set searchOnceOffSelected = .Find(contractTermValue, LookIn:=xlValues)
                If searchOnceOffSelected Is Nothing Then
                    
                    MsgBox "OneOff value target not found in pricebook"
    
                Else
                    'MsgBox searchOnceOffSelected.Address & " is found in Onceoff"
                    assignPriceVarColumn = searchOnceOffSelected.Column
                    'MsgBox assignPriceVarColumn & " New - zheshi column value"
                End If
                End With
            Else
    
                With priceBookSh.Worksheets("WAN-Vocus").Rows(3)
                Set searchOnceOffSelected = .Find(Target.Value, LookIn:=xlValues)
                If searchOnceOffSelected Is Nothing Then
                    'MsgBox "OneOff value target not found in pricebook"
    
                Else
                    'MsgBox searchOnceOffSelected.Address & " is found in Onceoff"
                    assignPriceVarColumn = searchOnceOffSelected.Column
                    'MsgBox assignPriceVarColumn & " New - zheshi column value"
    
                End If
                End With
    
            End If
    
    
            selectedServiceValue = Range(Target.Address).Offset(, -3).Value
    
    
            ' With priceBookSh.Worksheets("WAN-Vocus").Range("A:A")
            With priceBookSh.Worksheets("WAN-Vocus").Range("B:B")
                Set searchForSelectedCategoryAddress = .Find(selectedServiceValue, LookIn:=xlValues)
                If searchForSelectedCategoryAddress Is Nothing Then
                    'MsgBox "service Value is not found in pricebook"
                Else
                    'MsgBox searchForSelectedCategoryAddress.Address & " is found in priceBook"
                   ' MsgBox searchForSelectedCategoryAddress.Row
    
                    assignPriceVarRow = searchForSelectedCategoryAddress.Row
                End If
            End With
    
    '
    '
            oneRightOfTheNMR_Row = Range(Target.Address).Offset(, 1).Column
            oneRightOfTheNMR_Column = Range(Target.Address).Offset(, 1).Row
    

            Sh.Cells(oneRightOfTheNMR_Column, oneRightOfTheNMR_Row).Value = priceBookSh.Worksheets("WAN-Vocus").Cells(assignPriceVarRow, assignPriceVarColumn).Value
            Sh.Cells(oneRightOfTheNMR_Column, oneRightOfTheNMR_Row).Interior.ColorIndex = 37
    
        End If



'---------------------------------------sh.Cells(Target.Row, 7) Column H---------------------------------------------------
    ElseIf Target.Address = Sh.Cells(Target.Row, 8).Address Then
        'MsgBox "about to end"
        'MsgBox Target.Offset(, -2).Value
        'MsgBox Target.Offset(, -4).Value


    


    End If
        
    
        
    
    
    
End Sub

'Worksheet_SelectionChange creates a dropdown list in B2 column if the cell selected does not contian a list or is not the heading

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    
 
    Dim cell As Range, v As Long
    Dim Sh As Worksheet
    Set Sh = ThisWorkbook.Sheets("Sheet2")
    Dim priceBook As Worksheet
    Set priceBookSh = Workbooks("reformatted_priceBook.xlsx")
    
    If Target.Column = 2 And Target.Row <> 1 Then
        
        For Each cell In Selection.Cells
            v = 0
            On Error Resume Next
            v = cell.SpecialCells(xlCellTypeSameValidation).Count
            On Error GoTo 0
        
            If v = 0 Then
                'MsgBox "No validation"
                ' Below: Loop through the Worksheets object from wb to get all the sheetnames
                For Each ws In priceBookSh.Worksheets
                    ' Sheets("Sheet2").Cells(x, 1) = ws.Name
                    ' x = x + 1
                    
                    If x < priceBookSh.Worksheets.Count Then
                        tabValues = tabValues & ws.Name & ","
                    Else
                        tabValues = tabValues & ws.Name
                    End If
                    x = x + 1
                    
                Next ws
                Sh.Cells(Target.Row, Target.Column).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                Formula1:=tabValues
                'MsgBox "dropdown created"
            
            Else
                'MsgBox "Has validation"
                
                ' Below: opens the Workbook price
                
            End If
        Next
        
        
    Else
        
        
    End If
    
        
'
'    Dim cell As Range, v As Long
'
'    For Each cell In Selection.Cells
'        v = 0
'        On Error Resume Next
'        v = cell.SpecialCells(xlCellTypeSameValidation).Count
'        On Error GoTo 0
'
'        If v = 0 Then
'            MsgBox "No validation"
'        Else
'            MsgBox "Has validation"
'        End If
 '   Next


End Sub



